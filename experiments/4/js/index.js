const charts = {};
const totalSteps = 10;
const DATA_UPDATE_ANIMATION_DELAY = 400;
const schema = ["extensionInMM", "loadInN", "strain", "stess"];


var currPos = 0;
var currentStepProgress = 1;
var sampleLength = 0;
var sampleDiameter = 0;
var sampleFinalLength = 0;
var sampleFinalDiameter = 0;
const readingData = {
  strain: [0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000010,
    0.000010, 0.000010, 0.000010, 0.000020, 0.000030, 0.000040, 0.000060, 0.000080,
    0.000110, 0.000130, 0.000150, 0.000170, 0.000190, 0.000200, 0.000220, 0.000230,
    0.000240, 0.000250, 0.000260, 0.000260, 0.000270, 0.000280, 0.000290, 0.000300,
    0.000310, 0.000330, 0.000340, 0.000360, 0.000370, 0.000380, 0.000390, 0.000400,
    0.000410, 0.000430, 0.000440, 0.000450, 0.000460, 0.000470, 0.000470, 0.000480,
    0.000490, 0.000500, 0.000510, 0.000510, 0.000530, 0.000540, 0.000550, 0.000570,
    0.000590, 0.000600, 0.000610, 0.000620, 0.000620, 0.000630, 0.000640, 0.000650,
    0.000660, 0.000680, 0.000690, 0.000700, 0.000710, 0.000720, 0.000720, 0.000730,
    0.000740, 0.000750, 0.000760, 0.000770, 0.00078,
    0.00079, 0.00080, 0.00082, 0.00083, 0.00084, 0.00085, 0.00086, 0.00088, 0.00089, 0.00090, 
    0.00091, 0.00092, 0.00093, 0.00094, 0.00094, 0.00095, 0.00096, 0.00097, 0.00097, 0.00098, 
    0.00100, 0.00101, 0.00102, 0.00104, 0.00106, 0.00107, 0.00108, 0.00109, 0.00109, 0.00110, 
    0.00111, 0.00112, 0.00113, 0.00115, 0.00116, 0.00117, 0.00118, 0.00119, 0.00120, 0.00120, 
    0.00121, 0.00122, 0.00123, 0.00124, 0.00125, 0.00126, 0.00128, 0.00129, 0.00130, 0.00131, 
    0.00132, 0.00134, 0.00135, 0.00136, 0.00137, 0.00138, 0.00139, 0.00140, 0.00141, 0.00141, 
    0.00142, 0.00143, 0.00144, 0.00145, 0.00146, 0.00147, 0.00148, 0.00150, 0.00151, 0.00153, 
    0.00154, 0.00155, 0.00156, 0.00157, 0.00157, 0.00158, 0.00160, 0.00161, 0.00162, 0.00163, 
    0.00164, 0.00165, 0.00166, 0.00167, 0.00167, 0.00168, 0.00169, 0.00170, 0.00171, 0.00172, 
    0.00173, 0.00175, 0.00176, 0.00177, 0.00179, 0.00180, 0.00181, 0.00182,   0.11025, 0.11026,
    0.11028, 0.11029, 0.11030, 0.11030, 0.11031, 0.11032, 0.11033, 0.11034,
    0.11035, 0.11037, 0.11038, 0.11038, 0.11039, 0.11040, 0.11041, 0.11041, 0.11042, 0.11043,
    0.11045, 0.11046, 0.11047, 0.11048, 0.11050, 0.11051, 0.11052, 0.11053, 0.11054, 0.11056,
    0.11057, 0.11058, 0.11059, 0.11060, 0.11061, 0.11061, 0.11062, 0.11063, 0.11064, 0.11064,
    0.11065, 0.11066, 0.11068, 0.11069, 0.11070, 0.11072, 0.11073, 0.11075, 0.11076, 0.11077,
    0.11078, 0.11078, 0.11079, 0.11080, 0.11082, 0.11083, 0.11084, 0.11085, 0.11086, 0.11087,
    0.11087, 0.11088, 0.11089, 0.11090, 0.11091, 0.11092, 0.11093, 0.11095, 0.11096, 0.11097,
    0.11098, 0.11099, 0.11100, 0.11101, 0.11102, 0.11104, 0.11105, 0.11106, 0.11107, 0.11108,
    0.11109, 0.11109, 0.11110, 0.11111, 0.11112, 0.11113, 0.11114, 0.11115, 0.11117, 0.11118,
    0.11120, 0.11121, 0.11122, 0.11123, 0.11124, 0.11125, 0.11126, 0.11127, 0.11128, 0.11129,
    0.11130, 0.11131, 0.11132, 0.11133, 0.11134, 0.11134, 0.11135, 0.11136, 0.11137, 0.11138,
    0.11139, 0.11141, 0.11142, 0.11143, 0.11145, 0.11146, 0.11147, 0.11148, 0.11149, 0.11150,
    0.11151, 0.11152, 0.11154, 0.11154, 0.11155, 0.11156, 0.11157, 0.11157, 0.11158, 0.11159,
    0.11160, 0.11161, 0.11163, 0.11164, 0.11166, 0.11167, 0.11168, 0.11169, 0.11170, 0.11171,
    0.11172, 0.11173, 0.11174

  ],
  stress: [
0.0078, 0.0078, 0.0078, 0.0078, 0.0078, 0.0078, 0.0078, 0.0078, 0.0149, 0.0442, 0.0847, 
0.1579, 0.2916, 0.4928, 0.7656, 1.1122, 1.5324, 2.0173, 2.5016, 2.9433, 3.3058, 3.6194, 
3.9043, 4.1644, 4.3895, 4.5861, 4.7570, 4.9014, 5.0375, 5.1958, 5.3757, 5.5762, 5.8003, 
6.0482, 6.3130, 6.5870, 6.8535, 7.0911, 7.3113, 7.5164, 7.7205, 7.9337, 8.1571, 8.3835, 
8.5857, 8.7614, 8.9224, 9.0691, 9.2034, 9.3374, 9.4837, 9.6496, 9.8329, 10.0471, 10.3041, 
10.5867, 10.8779, 11.1546, 11.3773, 11.5566, 11.7151, 11.8640, 12.0196, 12.1849, 12.3698, 
12.5812, 12.8119, 13.0313, 13.2216, 13.3839, 13.5266, 13.6573, 13.7872, 13.9248, 14.0685, 
14.2323, 14.4279, 14.6548, 14.8927, 15.1322, 15.3668, 15.5962, 15.8108, 16.0087, 16.1960, 
16.3949, 16.6047, 16.8016, 16.9922, 17.1575, 17.3019, 17.4194, 17.5419, 17.6629, 17.7830, 
17.9153, 18.0732, 18.2652, 18.4752, 18.7136, 18.9720, 19.2353, 19.4807, 19.6916, 19.8550, 
19.9899, 20.1196, 20.2631, 20.4203, 20.6109, 20.8214, 21.0325, 21.2254, 21.3885, 21.5310, 
21.6522, 21.7634, 21.8825, 22.0091, 22.1601, 22.3321, 22.5227, 22.7313, 22.9473, 23.1669, 
23.3630, 23.5469, 23.7223, 23.8885, 24.0545, 24.2215, 24.4070, 24.5985, 24.7788, 24.9376, 
25.0636, 25.1751, 25.2760, 25.3779, 25.4869, 25.6133, 25.7559, 25.9269, 26.1280, 26.3684, 
26.6135, 26.8543, 27.0706, 27.2453, 27.3863, 27.5065, 27.6269, 27.7579, 27.9037, 28.0720, 
28.2476, 28.4286, 28.6082, 28.7508, 28.8611, 28.9493, 29.0340, 29.1353, 29.2494, 29.3900, 
29.5467, 29.7173, 29.9045, 30.1025, 30.3069, 30.5090, 30.6819, 30.8454, 30.9937, 30.9986, 
30.9645, 30.8939, 30.7895, 30.6492, 30.5055, 30.3678, 30.2341, 30.1153, 30.0228,
29.9270, 29.8445, 29.7545, 29.6562, 29.5308, 29.4016, 29.2677, 29.1518, 29.0570, 28.9776,
28.9237, 28.8821, 28.8355, 28.7862, 28.7368, 28.6626, 28.5659, 28.4592, 28.3396, 28.2317,
28.1278, 28.0279, 27.9336, 27.8289, 27.7110, 27.5875, 27.4622, 27.3396, 27.2177, 27.1227,
27.0355, 26.9649, 26.9041, 26.8614, 26.8193, 26.7614, 26.6893, 26.5890, 26.4469, 26.2818,
26.1172, 25.9642, 25.8177, 25.6888, 25.5751, 25.4801, 25.3922, 25.3026, 25.1877, 25.0596,
24.9258, 24.8063, 24.6956, 24.5950, 24.5072, 24.4479, 24.4068, 24.3555, 24.2842, 24.1938,
24.0916, 23.9698, 23.8425, 23.7257, 23.6053, 23.4956, 23.4038, 23.3129, 23.2241, 23.1191,
22.9928, 22.8608, 22.7267, 22.5976, 22.4811, 22.3919, 22.3115, 22.2472, 22.1837, 22.1178,
22.0414, 21.9535, 21.8486, 21.7192, 21.5820, 21.4366, 21.2943, 21.1471, 21.0118, 20.9029,
20.7958, 20.6939, 20.5747, 20.4368, 20.2815, 20.1351, 19.9896, 19.8645, 19.7546, 19.6539,
19.5643, 19.4688, 19.3619, 19.2431, 19.1031, 18.9467, 18.7728, 18.5846, 18.3899, 18.2019,
18.0230, 17.8615, 17.7151, 17.5761, 17.4261, 17.2769, 17.1242, 16.9824, 16.8560, 16.7517,
16.6645, 16.5864, 16.4986, 16.4046, 16.3074, 16.1849, 16.0128, 15.8205, 15.6070, 15.3985,
15.2081, 15.0418, 14.9106, 14.8765
  ],
  strain2: [ 0.0, 0.0, 0.0, 0.0, 2e-06, 2e-06, 2e-06, 2e-06, 5e-06, 7e-06, 1e-05, 1.7e-05, 
    2.4e-05, 3.2e-05, 4.2e-05, 4.9e-05, 5.4e-05, 6.1e-05, 6.9e-05, 7.4e-05, 8.1e-05, 
    8.9e-05, 9.6e-05, 0.000106, 0.000113, 0.000123, 0.00013, 0.00014, 0.000148, 
    0.000152, 0.00016, 0.000165, 0.00017, 0.000175, 0.00018, 0.000187, 0.000192, 
    0.000197, 0.000202, 0.000207, 0.000214, 0.000219, 0.000226, 0.000231, 0.000239, 
    0.000244, 0.000248, 0.000254, 0.000256, 0.000261, 0.000263, 0.000268, 0.00027, 
    0.000276, 0.000278, 0.000283, 0.000288, 0.00029, 0.000295, 0.0003, 0.000305, 
    0.000313, 0.000317, 0.000325, 0.000332, 0.000339, 0.000347, 0.000354, 0.000362, 
    0.000369, 0.000374, 0.000381, 0.000386, 0.000391, 0.000394, 0.000398, 0.000404, 
    0.000406, 0.000411, 0.000416, 0.000421, 0.000426, 0.000431, 0.000435, 0.000441, 
    0.000445, 0.00045, 0.000457, 0.000463, 0.00047, 0.000477, 0.000482, 0.000487, 
    0.000494, 0.000497, 0.000502, 0.000507, 0.000509, 0.000514, 0.000517, 0.000522, 
    0.000524, 0.000529, 0.000534, 0.000539, 0.000544, 0.000549, 0.000554, 0.000561, 
    0.000569, 0.000573, 0.000581, 0.000588, 0.000595, 0.000603, 0.000608, 0.000613, 
    0.000618, 0.000625, 0.000628, 0.000632, 0.000637, 0.000644, 0.00065, 0.000654, 
    0.000659, 0.000664, 0.000669, 0.000674, 0.000679, 0.000687, 0.000691, 0.000699, 
    0.000704, 0.000711, 0.000716, 0.000719, 0.000723, 0.000728, 0.000731, 0.000736, 
    0.000741, 0.000743, 0.000748, 0.00075, 0.000756, 0.00076, 0.000763, 0.000768, 
    0.000775, 0.00078, 0.000785, 0.000792, 0.0008, 0.000807, 0.000812, 0.000819, 
    0.000827, 0.000834, 0.000841, 0.000846, 0.000854, 0.000859, 0.000864, 0.000866, 
    0.000871, 0.000876, 0.000881, 0.000883, 0.000888, 0.000896, 0.0009, 0.000906, 
    0.00091,0.000915,0.000923,0.000928,0.000935,0.000940,0.000947,
    2.87294, 2.87294, 2.87294, 2.87294, 2.87294, 2.87294, 2.87294, 2.87294, 2.87294, 2.87294,
    2.87294, 2.87294, 2.87294, 2.87294, 2.87294, 2.87294, 2.87294, 2.87294, 2.87294, 2.87294,
    2.87294, 2.87294, 2.87294, 2.87294, 2.87294, 2.87294, 2.87294, 2.87294, 2.87294, 2.87294,
    2.87294, 2.87294, 2.87294, 2.87294, 2.87294, 2.87294, 2.87294, 2.87294, 2.87294, 2.87294,
    2.87294, 2.87294, 2.87294, 2.87294, 2.87294, 2.87294, 2.87294, 2.87294, 2.87294, 2.87294,
    2.87294, 2.87294, 2.87294, 2.87294, 2.87294, 2.87294, 2.87294, 2.87294, 2.87294, 2.87294,
    2.87294, 2.87294, 2.87294, 2.87294, 2.87294, 2.87294, 2.87294, 2.87294, 2.87294, 2.87294,
    2.87294, 2.87294, 2.87294, 2.87294, 2.87294, 2.87294, 2.87294, 2.87294, 2.87294, 2.87294,
    2.87294, 2.87294, 2.87294, 2.87294, 2.87294, 2.87294, 2.87294, 2.87294, 2.87294, 2.87294,
    2.87294, 2.87294, 2.87294, 2.87294, 2.87294, 2.87294, 2.87294, 2.87294, 2.87294, 2.87294,
    2.87294, 2.87294, 2.87294, 2.87294, 2.87294, 2.87294, 2.87294, 2.87294, 2.87294, 2.87294,
    2.87294, 2.87294, 2.87294, 2.87294, 2.87294, 2.87294, 2.87294, 2.87294, 2.87294, 2.87294,
    2.87294, 2.87294, 2.87294, 2.87294, 2.87294, 2.87294, 2.87294, 2.87294, 2.87294, 2.87294,
    2.87294, 2.87294, 2.87294, 2.87294, 2.87294, 2.87294, 2.87294, 2.87294, 2.87294, 2.87294,
    2.87294, 2.87294, 2.87294, 2.87294, 2.87294, 2.87294, 2.87294, 2.87294, 2.87294, 2.87294,
    2.87294, 2.87294, 2.87294, 2.87294, 2.87294, 2.87294, 2.87294, 2.87294, 2.87294, 2.87294,
    2.87294, 2.87294, 2.87294, 2.87294, 2.87294, 2.87294, 2.87294, 2.87294, 2.87294, 2.87294,
    2.87294, 2.87294, 2.87294, 2.87294, 2.87294, 2.87294, 2.87294, 2.87294, 2.87294, 2.87294,
    2.87294, 2.87294, 2.87294, 2.87294, 2.87294, 2.87294, 2.87294, 2.87294, 2.87294, 2.87294,
    2.87294, 2.87294, 2.87294, 2.87294, 2.87294, 2.87294, 2.87294, 2.87294, 2.87294, 2.87294,
    2.87294, 2.87294, 2.87294, 2.87294, 2.87294, 2.87294, 2.87294, 2.87294, 2.87294, 2.87294,
    2.87294, 2.87294, 2.87294, 2.87294, 2.87294, 2.87294, 2.87294, 2.87294, 2.87294, 2.87294,
    2.87294, 2.87294, 2.87294, 2.87294, 2.87294, 2.87294, 2.87294, 2.87294, 2.87294, 2.87294,
    2.87294, 2.87294, 2.87294, 2.87294, 
   

  ],
  stress2: [
    0.0090, 0.0090, 0.0090, 0.0090, 0.0090, 0.0090, 0.0090, 0.0090, 0.0090, 0.0090, 
    0.0286, 0.0930, 0.2021, 0.3747, 0.5768, 0.7955, 1.0163, 1.2198, 1.4063, 1.5715, 
    1.7425, 1.9261, 2.1078, 2.3075, 2.5209, 2.7578, 3.0044, 3.2487, 3.4784, 3.6927, 
    3.8864, 4.0506, 4.2080, 4.3458, 4.4826, 4.6270, 4.7730, 4.9161, 5.0530, 5.1959, 
    5.3407, 5.4950, 5.6562, 5.8188, 5.9905, 6.1676, 6.3243, 6.4462, 6.5559, 6.6605, 
    6.7526, 6.8464, 6.9315, 7.0219, 7.1243, 7.2264, 7.3274, 7.4245, 7.5352, 7.6486, 
    7.7666, 7.9102, 8.0565, 8.2034, 8.3582, 8.5300, 8.7133, 8.9138, 9.1115, 9.3142, 
    9.5172, 9.6857, 9.8404, 9.9808, 10.0946, 10.2020, 10.2992, 10.4142, 10.5234, 
    10.6167, 10.7208, 10.8404, 10.9540, 11.0645, 11.1757, 11.3020, 11.4438, 11.5901, 
    11.7373, 11.8916, 12.0534, 12.2172, 12.3715, 12.5102, 12.6476, 12.7709, 12.8874, 
    12.9968, 13.0800, 13.1630, 13.2472, 13.3378, 13.4271, 13.5200, 13.6291, 13.7495, 
    13.8709, 13.9913, 14.1171, 14.2464, 14.3941, 14.5617, 14.7443, 14.9225, 15.0969, 
    15.2611, 15.4141, 15.5531, 15.6868, 15.8067, 15.9162, 16.0324, 16.1455, 16.2671, 
    16.3799, 16.4888, 16.6117, 16.7331, 16.8496, 16.9648, 17.0953, 17.2303, 17.3820, 
    17.5380, 17.6886, 17.8170, 17.9314, 18.0413, 18.1435, 18.2333, 18.3225, 18.4142, 
    18.5037, 18.5822, 18.6616, 18.7469, 18.8398, 18.9374, 19.0275, 19.1341, 19.2507, 
    19.3684, 19.4976, 19.6405, 19.7916, 19.9506, 20.1134, 20.2864, 20.4501, 20.6090, 
    20.7658, 20.9233, 21.0574, 21.1732, 21.2776, 21.3728, 21.4608, 21.5485, 21.6387, 
    21.7298, 21.8282, 21.9206, 22.0236, 22.1448, 22.2762, 22.4059, 22.5327, 22.6589, 
    22.7896, 22.9215, 23.9968, 23.9634,23.9226,23.8798,23.8409,23.7980,23.7639,23.7371,23.7132,23.6811,23.6619,23.6631,23.6418,
    23.6173,23.6040,23.5935,23.5768,23.5532,23.5269,23.4938,23.4466,23.3985,23.3414,23.2955,23.2624,23.2311,23.2028,23.1769,
    23.1668,23.1515,23.1362,23.1253,23.1158,23.1139,23.1015,23.0936,23.0985,23.1062,23.1131,23.1268,23.1308,23.1257,23.1143,
    23.0888, 23.0484, 23.0019, 22.9541, 22.8967, 22.8439, 22.7944, 22.7511, 22.7168, 22.6921,
    22.6745, 22.6629, 22.6472, 22.6328, 22.6212, 22.6103, 22.5995, 22.5924, 22.5883, 22.5724,
    22.5442, 22.5209, 22.5030, 22.4789, 22.4369, 22.3936, 22.3604, 22.3257, 22.3001, 22.2784,
    22.2637, 22.2478, 22.2175, 22.1910, 22.1802, 22.1740, 22.1599, 22.1478, 22.1546, 22.1530,
    22.1704, 22.1735, 22.1659, 22.1590, 22.1496, 22.1331, 22.1080, 22.0612, 22.0148, 21.9790,
    21.9535, 21.9115, 21.8695, 21.8456, 21.8268, 21.8118, 21.7983, 21.7810, 21.7691, 21.7593,
    21.7523, 21.7411, 21.7219, 21.7030, 21.6763, 21.6567, 21.6298, 21.5842, 21.5374, 21.4956,
    21.4576, 21.4189, 21.3958, 21.3828, 21.3690, 21.3402, 21.3294, 21.3276, 21.3230, 21.3014,
    21.3001, 21.3119, 21.3244, 21.3300, 21.3442, 21.3675, 21.3780, 21.3744, 21.3537, 21.3226,
    21.2830, 21.2264, 21.1731, 21.1211, 21.0823, 21.0481, 21.0125, 20.9852, 20.9644, 20.9492,
    20.9358, 20.9207, 20.9061, 20.8951, 20.8839, 20.8696, 20.8491, 20.8336, 20.8237, 20.8242,
    20.8135, 20.7944, 20.7753, 20.7465, 20.7187, 20.6899, 20.6631, 20.6315, 20.5978, 20.5638,
    20.5385, 20.5221, 20.4975, 20.4755, 20.4725, 20.4690, 20.4701, 20.4679, 20.4534, 20.4465,
    20.4543, 20.4654, 20.4736, 20.4763, 20.4645, 20.4333, 20.3928, 20.3539, 20.3211, 20.2982,
    20.2557, 20.2206, 20.1886, 20.1541, 20.1271, 20.0956, 20.0724, 20.0607, 20.0506, 20.0406,
    20.0302, 20.0186, 20.0176, 20.0109, 19.9800, 19.9492, 19.9129, 19.8695, 19.8222, 19.7859,
    19.7570, 19.7323, 19.7091, 19.6947, 19.6636, 19.6456, 19.6399, 19.6475, 19.6617, 19.6728,
    19.6614, 19.6588, 19.6760, 19.6848, 19.6957, 19.7138, 19.7128, 19.7097, 19.6995, 19.6551,
    19.6028, 19.5419, 19.4976, 19.3976, 19.2976, 18.9976, 18.7976, 18.5976, 18.2976, 17.9976,
    17.8976,
  ],
  strain3: [ 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000005,
    0.000007, 0.000007, 0.000010, 0.000012, 0.000015, 0.000020, 0.000027, 0.000034,
    0.000047, 0.000057, 0.000069, 0.000081, 0.000091, 0.000101, 0.000108, 0.000116,
    0.000120, 0.000126, 0.000130, 0.000138, 0.000143, 0.000148, 0.000152, 0.000160,
    0.000167, 0.000175, 0.000182, 0.000187, 0.000194, 0.000202, 0.000207, 0.000211,
    0.000217, 0.000224, 0.000229, 0.000234, 0.000239, 0.000244, 0.000248, 0.000254,
    0.000258, 0.000263, 0.000270, 0.000276, 0.000283, 0.000288, 0.000295, 0.000300,
    0.000307, 0.000313, 0.000317, 0.000322, 0.000327, 0.000332, 0.000335, 0.000339,
    0.000342, 0.000347, 0.000349, 0.000354, 0.000357, 0.000362, 0.000367, 0.000372,
    0.000376, 0.000381, 0.000389, 0.000394, 0.000401, 0.000408, 0.000416, 0.000423,
    0.000433, 0.000441, 0.000448, 0.000453, 0.000457, 0.000463, 0.000467, 0.000470,
    0.000475, 0.000477, 0.000482, 0.000487, 0.000492, 0.000497, 0.000500, 0.000507,
    0.000512, 0.000517, 0.000522, 0.000529, 0.000534, 0.000541, 0.000546, 0.000551,
    0.000559, 0.000563, 0.000566, 0.000571, 0.000576, 0.000578, 0.000583, 0.000588,
    0.000591, 0.000595, 0.000600, 0.000603, 0.000608, 0.000613, 0.000618, 0.000622,
    0.000630, 0.000635, 0.000642, 0.000650, 0.000654, 0.000662, 0.000669, 0.000674,
    0.000681, 0.000687, 0.000691, 0.000696, 0.000701, 0.000706, 0.000711, 0.000719,
    0.000723, 0.000728, 0.000733, 0.000738, 0.000746, 0.000750, 0.000758, 0.000763,
    0.000770, 0.000775, 0.000780, 0.000785, 0.000790, 0.000795, 0.000797, 0.000802,
    0.000807, 0.000809, 0.000815, 0.000817, 0.000822, 0.000827, 0.000829, 0.000834,
    0.000839, 0.000844, 0.000849, 0.000856, 0.000861, 0.000869, 0.000876, 0.000883,
    0.000891, 0.000900, 0.000908, 0.000915, 0.000923, 0.000928, 0.000933, 0.000935,
   0.088457, 0.088462, 0.088465, 0.088469, 0.088472, 0.088477, 
    0.088482, 0.088487, 0.088492, 0.088496, 0.088502, 0.088509, 0.088516, 0.088524, 0.088531, 0.088538, 
    0.088548, 0.088556, 0.088563, 0.088568, 0.088575, 0.088580, 0.088583, 0.088587, 0.088590  
  ],
  stress3: [
    0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0039, 0.0520,
    0.1171, 0.1833, 0.2758, 0.4227, 0.6532, 0.9369, 1.2578, 1.6017, 1.9597, 2.3093, 2.6302, 2.8973,
    3.1404, 3.3520, 3.5311, 3.6884, 3.8444, 4.0011, 4.1655, 4.3469, 4.5414, 4.7391, 4.9410, 5.1474,
    5.3701, 5.5837, 5.7831, 5.9412, 6.1045, 6.2762, 6.4464, 6.6014, 6.7452, 6.8850, 7.0381, 7.2072,
    7.3840, 7.5612, 7.7205, 7.8758, 8.0346, 8.2021, 8.3819, 8.5672, 8.7598, 8.9466, 9.1300, 9.2987,
    9.4333, 9.5619, 9.6857, 9.8090, 9.9348, 10.0381, 10.1327, 10.2464, 10.3532, 10.4727, 10.5928,
    10.7055, 10.8315, 10.9829, 11.1352, 11.2984, 11.4677, 11.6545, 11.8574, 12.0770, 12.3117, 12.5480,
    12.7890, 13.0175, 13.2236, 13.3890, 13.5472, 13.6555, 13.7457, 13.8399, 13.9540, 14.0661, 14.1799,
    14.2930, 14.4110, 14.5298, 14.6642, 14.8076, 14.9602, 15.1193, 15.3072, 15.4878, 15.6486, 15.8179,
    15.9759, 16.1279, 16.2660, 16.3912, 16.5239, 16.6522, 16.7622, 16.8564, 16.9555, 17.0644, 17.1676,
    17.2773, 17.3922, 17.5104, 17.6366, 17.7628, 17.9005, 18.0501, 18.2122, 18.3906, 18.5649, 18.7670,
    18.9728, 19.1395, 19.3155, 19.4889, 19.6466, 19.7836, 19.9175, 20.0591, 20.1981, 20.3251, 20.4462,
    20.5728, 20.7187, 20.8616, 21.0086, 21.1619, 21.3163, 21.4758, 21.6312, 21.7732, 21.9168, 22.0724,
    22.2252, 22.3586, 22.4592, 22.5486, 22.6646, 22.7619, 22.8447, 22.9316, 23.0338, 23.1255, 23.2245,
    23.3246, 23.4289, 23.5441, 23.6648, 23.7963, 23.9368, 24.0829, 24.2358, 24.4065, 24.6016, 24.8166,
    25.0489, 25.2798, 25.4841, 25.6656, 25.8106, 25.9331, 25.8835, 25.7208, 25.5663, 25.4165, 25.2690, 
    25.1194, 24.9694, 24.8136, 24.6672, 24.5328, 24.3786, 24.2335, 24.0864, 23.9275, 23.7592, 23.5685, 
    23.3551, 23.1340, 22.9056, 22.6807, 22.4677, 22.2681, 22.0839, 21.9173, 21.8607
   

  ],
  strain4: [ 0.000000, 0.000000, 0.000000, 0.000000, 0.000002, 0.000002, 0.000005, 0.000005,
    0.000007, 0.000010, 0.000010, 0.000012, 0.000017, 0.000022, 0.000032, 0.000042,
    0.000052, 0.000061, 0.000074, 0.000084, 0.000091, 0.000098, 0.000104, 0.000111,
    0.000116, 0.000120, 0.000126, 0.000130, 0.000135, 0.000140, 0.000148, 0.000155,
    0.000160, 0.000167, 0.000175, 0.000182, 0.000189, 0.000194, 0.000202, 0.000207,
    0.000212, 0.000217, 0.000222, 0.000226, 0.000231, 0.000236, 0.000244, 0.000248,
    0.000254, 0.000258, 0.000266, 0.000271, 0.000278, 0.000283, 0.000291, 0.000295,
    0.000300, 0.000305, 0.000310, 0.000315, 0.000317, 0.000322, 0.000325, 0.000330,
    0.000335, 0.000337, 0.000342, 0.000344, 0.000350, 0.000354, 0.000359, 0.000364,
    0.000369, 0.000374, 0.000381, 0.000386, 0.000394, 0.000401, 0.000411, 0.000419,
    0.000428, 0.000435, 0.000441, 0.000445, 0.000450, 0.000455, 0.000458, 0.000463,
    0.000465, 0.000470, 0.000475, 0.000478, 0.000482, 0.000487, 0.000492, 0.000497,
    0.000504, 0.000509, 0.000517, 0.000522, 0.000529, 0.000534, 0.000539, 0.000546,
    0.000549, 0.000554, 0.000559, 0.000563, 0.000566, 0.000571, 0.000576, 0.000578,
    0.000583, 0.000586, 0.000591, 0.000596, 0.000600, 0.000606, 0.000610, 0.000618,
    0.000622, 0.000630, 0.000635, 0.000642, 0.000650, 0.000657, 0.000662, 0.000669,
    0.000674, 0.000679, 0.000684, 0.000689, 0.000694, 0.000699, 0.000704, 0.000709,
    0.000716, 0.000721, 0.000726, 0.000733, 0.000738, 0.000746, 0.000750, 0.000756,
    0.000760, 0.000765, 0.000773, 0.000775, 0.000780, 0.000785, 0.000790, 0.000795,
    0.000797, 0.000802, 0.000805, 0.000809, 0.000812, 0.000817, 0.000822, 0.000827,
    0.000832, 0.000837, 0.000842, 0.000846, 0.000854, 0.000861, 0.000869, 0.000876,
    0.000886, 0.000893, 0.000901, 0.000908, 0.000913, 0.000918, 0.000923, 0.000925,
    0.000930, 0.000933, 0.000937, 0.000940, 0.000945, 0.000950, 0.000955, 0.000960,
    0.000965, 0.000970, 0.000974, 0.000980, 0.000987, 0.000992, 0.000999, 0.001004,
    0.001011, 0.001016, 0.001021, 0.001026, 0.001031, 0.001036, 0.001039, 0.001043,
    0.001048, 0.001051, 0.001056, 0.001058, 0.001063, 0.001065, 0.001070, 0.001075,
    0.001080, 0.001085, 0.001093, 0.001100, 0.001107,
    0.078922, 0.078930, 0.078935, 0.078942, 0.078947, 0.078952, 0.078957, 0.078962, 0.078967, 0.078972, 
    0.078979, 0.078984, 0.078989, 0.078994, 0.078998, 0.079006, 0.079013, 0.079018, 0.079023, 0.079031, 
    0.079035, 0.079041, 0.079045, 0.079050, 0.079055, 0.079057, 0.079063, 0.079067, 0.079070, 0.079075, 
    0.079077, 0.079082, 0.079085, 0.079090, 0.079094, 0.079097, 0.079102, 0.079109, 0.079114, 0.079122, 
    0.079129, 0.079136, 0.079144, 0.079154, 0.079161, 0.079169, 0.079176, 0.079181, 0.079185, 0.079191, 
    0.079195, 0.079198, 0.079203, 0.079205, 0.079210, 0.079215, 0.079218, 0.079222, 0.079228, 0.079232, 
    0.079237, 0.079244, 0.079250, 0.079257, 0.079262, 0.079269, 0.079274, 0.079279, 0.079287, 0.079289, 
    0.079294, 0.079299, 0.079304, 0.079309, 0.079311, 0.079316, 0.079321, 0.079323, 0.079328, 0.079331, 
    0.079336, 0.079341, 0.079346, 0.079350, 0.079358, 0.079363, 0.079370, 0.079378, 0.079382, 0.079390, 
    0.079395, 0.079402, 0.079409, 0.079415, 0.079419, 0.079424, 0.079429, 0.079434, 0.079439, 0.079444, 
    0.079449, 0.079454, 0.079461, 0.079466, 0.079471, 0.079478, 0.079483, 0.079491, 0.079496, 0.079500, 
    0.079508, 0.079513, 0.079518, 0.079520, 0.079525, 0.079530, 0.079533, 0.079537, 0.079543, 0.079545, 
    0.079550, 0.079552, 0.079557, 0.079562, 0.079567, 0.079572, 0.079577, 0.079582, 0.079587, 0.079594, 
    0.079602, 0.079611, 0.079619, 0.079628, 0.079636, 0.079643, 0.079651, 0.079656, 0.079658, 0.079663, 
    0.079668, 0.079670, 0.079675, 0.079678, 0.079683, 0.079685, 0.079690, 0.079695, 0.079700, 0.079705, 
    0.079710, 0.079715, 0.079722, 0.079727, 0.079734, 0.079739, 0.079746, 0.079752, 0.079756, 0.079761, 
    0.079766, 0.079771, 0.079776, 0.079779, 0.079783, 0.079786, 0.079791, 0.079796, 0.079798, 0.079803, 
    0.079806, 0.079811, 0.079815, 0.079820, 0.079825, 0.079833, 0.079840, 0.079848, 0.079855, 0.079862, 
    0.079870, 0.079877, 0.079882, 0.079887, 0.079894, 0.079899, 0.079904, 0.079909, 0.079914, 0.079919, 
    0.079924, 0.079929, 0.079933, 0.079941, 0.079946, 0.079953, 0.079958, 0.079963, 0.079970, 0.079976, 
    0.079980, 0.079985, 0.079990, 0.079993, 0.079998, 0.080000, 0.080005, 0.080010, 0.080012, 0.080015, 
    0.080020, 0.080025, 0.080027, 0.080032, 0.080037, 0.080042, 0.080049, 0.080054, 0.080059, 0.080067, 
    0.080074, 0.080084, 0.080091, 0.080098, 0.080106, 0.080113, 0.080120, 0.080126, 0.080128, 0.080133, 
    0.080135, 0.080140, 0.080143, 0.080148, 0.080153, 0.080157, 0.080160, 0.080165, 0.080170, 0.080175, 
    0.080182, 0.080187, 0.080194, 0.080199, 0.080204, 0.080212, 0.080219, 0.080224, 0.080229, 0.080234, 
    0.080239, 0.080241, 0.080246, 0.080251, 0.080254, 0.080258, 0.080263, 0.080266, 0.080271, 0.080276, 
    0.080281, 0.080285, 0.080291, 0.080295, 0.080303, 0.080310, 0.080315, 0.080322, 0.080330, 0.080335, 
    0.080342, 0.080347, 0.080354, 0.080359, 0.080364, 0.080369, 0.080374, 0.080379, 0.080384, 0.080391, 
    0.080396, 0.080401, 0.080406, 0.080413, 0.080419, 0.080423, 0.080431, 0.080435, 0.080441, 0.080448, 
    0.080453, 0.080455, 0.080460, 0.080465, 0.080468, 0.080472, 0.080475, 0.080478
  ],
  stress4: [
    0.0260, 0.0260, 0.0260, 0.0260, 0.0260, 0.0260, 0.0260, 0.0260,
    0.0260, 0.0260, 0.0260, 0.0606, 0.1259, 0.2147, 0.3400, 0.5346,
    0.8133, 1.1302, 1.4808, 1.8451, 2.1912, 2.5062, 2.7716, 3.0017,
    3.1864, 3.3445, 3.5072, 3.6534, 3.8028, 3.9739, 4.1529, 4.3385,
    4.5510, 4.7790, 5.0042, 5.2405, 5.4649, 5.7002, 5.9160, 6.1022,
    6.2827, 6.4396, 6.5918, 6.7613, 6.9376, 7.1021, 7.2585, 7.4244,
    7.5955, 7.7533, 7.9320, 8.1174, 8.3228, 8.5326, 8.7189, 8.8996,
    9.0840, 9.2486, 9.4146, 9.5555, 9.6785, 9.8288, 9.9729, 10.0960,
    10.2053, 10.3005, 10.4166, 10.5290, 10.6406, 10.7689, 10.8976, 11.0327,
    11.1739, 11.3130, 11.4929, 11.6782, 11.8695, 12.0823, 12.3262, 12.5708,
    12.8282, 13.0852, 13.3252, 13.5387, 13.7328, 13.8770, 13.9862, 14.1103,
    14.2308, 14.3410, 14.4375, 14.5478, 14.6711, 14.7939, 14.9141, 15.0618,
    15.2138, 15.3763, 15.5517, 15.7451, 15.9355, 16.1304, 16.3218, 16.4875,
    16.6189, 16.7634, 16.8829, 17.0139, 17.1321, 17.2586, 17.3868, 17.4838,
    17.5889, 17.7224, 17.8333, 17.9369, 18.0484, 18.1616, 18.3196, 18.4953,
    18.6670, 18.8322, 19.0092, 19.1941, 19.3985, 19.5914, 19.7654, 19.9282,
    20.1103, 20.2980, 20.4479, 20.6063, 20.7482, 20.8976, 20.9996, 21.0975,
    21.2431, 21.3904, 21.5137, 21.6858, 21.8643, 22.0403, 22.2128, 22.3716,
    22.5267, 22.6634, 22.8061, 22.9248, 23.0362, 23.1653, 23.2683, 23.3617,
    23.4579, 23.5352, 23.6262, 23.7353, 23.8262, 23.9094, 23.9999, 24.0890,
    24.1985, 24.3230, 24.4311, 24.5651, 24.7158, 24.8791, 25.0571, 25.2552,
    25.4518, 25.6835, 25.9283, 26.1453, 26.3367, 26.5005, 26.6181, 26.7133,
    26.8045, 26.8819, 26.9550, 27.0123, 27.0909, 27.1844, 27.2888, 27.3988,
    27.5133, 27.6360, 27.7744, 27.9192, 28.0612, 28.2063, 28.3347, 28.4837,
    28.6401, 28.8152, 28.9866, 29.1444, 29.2567, 29.3464, 29.4458, 29.5549,
    29.6757, 29.7664, 29.8464, 29.9190, 30.0127, 30.0956, 30.1727, 30.2555,
    30.3440, 30.4656, 30.6239, 30.7871, 30.9607,
    30.9990, 30.9973, 31.0004, 30.9797, 30.9571, 30.9212, 30.8938, 30.8710, 30.8383, 30.8080,
    30.7852, 30.7584, 30.7215, 30.6930, 30.6616, 30.6463, 30.6296, 30.6266, 30.6181, 30.6150,
    30.5860, 30.5380, 30.5238, 30.5094, 30.4590, 30.4112, 30.3922, 30.3632, 30.3102, 30.2587,
    30.2156, 30.1887, 30.1585, 30.1370, 30.1324, 30.1273, 30.1045, 30.0920, 30.0843, 30.1044,
    30.1206, 30.1401, 30.1614, 30.1706, 30.1683, 30.1785, 30.1628, 30.1568, 30.1114, 30.0347,
    29.9624, 29.9031, 29.8510, 29.8031, 29.7532, 29.7036, 29.6870, 29.6596, 29.6376, 29.6213,
    29.6384, 29.6488, 29.6510, 29.6545, 29.6548, 29.6435, 29.6440, 29.6254, 29.6107, 29.5993,
    29.5747, 29.5325, 29.4725, 29.4234, 29.3906, 29.3514, 29.3133, 29.2710, 29.2472, 29.2184,
    29.1830, 29.1749, 29.1732, 29.1816, 29.1890, 29.1957, 29.2051, 29.2110, 29.2089, 29.2008,
    29.1772, 29.1813, 29.1698, 29.1417, 29.1159, 29.0784, 29.0381, 29.0018, 28.9589, 28.9081,
    28.8629, 28.8342, 28.8140, 28.7987, 28.7788, 28.7684, 28.7694, 28.7544, 28.7547, 28.7484,
    28.7236, 28.6763, 28.6282, 28.5797, 28.5297, 28.4992, 28.4798, 28.4555, 28.4300, 28.3988,
    28.3671, 28.3325, 28.3036, 28.2973, 28.2953, 28.2646, 28.2556, 28.2608, 28.2774, 28.2790,
    28.2687, 28.2805, 28.3032, 28.3173, 28.3363, 28.3259, 28.2925, 28.2592, 28.1986, 28.1203,
    28.0509, 27.9973, 27.9543, 27.8880, 27.8374, 27.8094, 27.7761, 27.7504, 27.7363, 27.7152,
    27.6992, 27.6899, 27.6972, 27.7192, 27.7352, 27.7154, 27.7065, 27.7101, 27.7061, 27.6812,
    27.6237, 27.5877, 27.5507, 27.5110, 27.4770, 27.4401, 27.4029, 27.3711, 27.3205, 27.2947,
    27.2762, 27.2643, 27.2567, 27.2581, 27.2538, 27.2649, 27.2747, 27.2895, 27.2998, 27.3191,
    27.3204, 27.3156, 27.3052, 27.2657, 27.2305, 27.1775, 27.1358, 27.0830, 27.0337, 26.9815,
    26.9554, 26.9414, 26.9130, 26.8783, 26.8575, 26.8704, 26.8659, 26.8477, 26.8270, 26.8114,
    26.7901, 26.7634, 26.7438, 26.7036, 26.6446, 26.5802, 26.5414, 26.5230, 26.5256, 26.5138,
    26.4875, 26.4487, 26.4098, 26.4090, 26.4056, 26.3827, 26.3801, 26.3718, 26.3850, 26.4058,
    26.4073, 26.4055, 26.4367, 26.4554, 26.4415, 26.4240, 26.3959, 26.3509, 26.2948, 26.2269,
    26.1660, 26.1224, 26.0689, 26.0100, 25.9709, 25.9563, 25.9407, 25.9306, 25.9303, 25.9236,
    25.9177, 25.9132, 25.9172, 25.8999, 25.8829, 25.8832, 25.8969, 25.8990, 25.8742, 25.8358,
    25.8130, 25.7724, 25.7147, 25.6631, 25.6307, 25.5857, 25.5490, 25.5252, 25.5157, 25.4922,
    25.4612, 25.4511, 25.4666, 25.4924, 25.4875, 25.4872, 25.4776, 25.4859, 25.4975, 25.5039,
    25.4771, 25.4430, 25.4102, 25.3954, 25.3629, 25.3156, 25.2680, 25.2374, 25.2181, 25.1938,
    25.1742, 25.1656, 25.1393, 25.1169, 25.0894, 25.0657, 25.0675, 25.0542, 25.0353, 25.0219,
    24.9795, 24.9461, 24.9222, 24.8847, 24.8376, 24.8027, 24.7643, 24.7496  ],
};


// var subStepResult = [
//   [-40.3, 8.1],
//   [30.4, 21.3],
//   [79.6, 83.4],
// ];
console.log(readingData.strain.length);
console.log(readingData.stress.length);
console.log(readingData.strain2.length);
console.log(readingData.stress2.length);
console.log(readingData.strain3.length);
console.log(readingData.stress3.length);
console.log(readingData.strain4.length);
console.log(readingData.stress4.length);

document.getElementById("step1").classList.remove("disabled");
window.refresh();

function handle() {
  eval(`handleStep${currentStepProgress}()`);
  window.refresh();
}

function handleStep1() {
  let pane = document.getElementById("step1");
  
  pane.classList.add("done");
  pane.classList.remove("active");

  let next = document.getElementById("step2");
  next.classList.add("active");
  next.classList.remove("disabled");

  currentStepProgress = 2;
}

function handleStep2() {
  let pane = document.getElementById("step2");

  if (!mit.isSampleLoaded()) {
    alert("Please load the sample on the machine first!");
    return;
  }

  pane.classList.add("done");
  pane.classList.remove("active");

  document.getElementById("btnNext").disabled = true;

  let mode = "";
  const btnReset = document.getElementById("btnReset");
  const startBtn = document.getElementById("startTest");

  btnReset.addEventListener("click", (e) => {
    //mit.reset();
    btnReset.disabled = true;
    //startBtn.disabled = false;
     mit.destroy();
     sample.init();
     utm.init();
     let btnResetSteps= document.getElementsByClassName("btnResetSteps")[0];
     btnResetSteps.style.display=  `block`;
     document.getElementById("btnNext").disabled = false;
  });
 
  startBtn.addEventListener("click", (e) => {
    startBtn.disabled = true;
    let startTextHeading= document.getElementById("startTextHeading");
    setTimeout(() => {
      startTextHeading.innerHTML= `Perfom rolling of individual sample for 20%, 40% amd 60%`;
      btnReset.disabled=false;
    }, 2000);
    
  });


  pane.classList.add("done");
  pane.classList.remove("active");

  let next = document.getElementById("step3");
  next.classList.add("active");
  next.classList.remove("disabled");

  currentStepProgress = 3;
}

function handleStep3() {
  let pane = document.getElementById("step3");

  if(insertEntry()){
  pane.classList.add("done");
  pane.classList.remove("active");

  let next = document.getElementById("step4");
  next.classList.add("active");
  next.classList.remove("disabled");

  currentStepProgress = 4;
  }
}
function insertEntry() {
  let len = document.getElementById("step1Length").value;
if (!len) {
  alert("Please enter the length in step 3.1.");
  return false;
}

if (len < 24 || len > 26) {
  alert("Wrong readings! Please take your reading correctly. (Length range must be in b/w 24 to 26 mm)");
  return false ;
}

sampleLength = len;
let dia = document.getElementById("step2Dia").value;
if (!dia) {
  alert("Please enter the diameter in step 3.2.");
  return false ;
}

if (dia < 4 || dia > 6) {
  alert("Wrong readings! Please take your reading correctly. (Width range must be in b/w 5 to 6 mm)");
  return false;
}

sampleDiameter = dia;
let tick = document.getElementById("step2Thickness").value;
if (!tick) {
  alert("Please enter the Thickness in step 3.3.");
  return false;
}

if (tick < 2 || tick > 4) {
  alert("Wrong readings! Please take your reading correctly. (Thickness range must be in b/w 2 to 4 mm)");
  return false;
}

sampleThickness = tick;
return true;

}
function handleStep4() {
  let pane = document.getElementById("step4");
  if (!utm.isSampleLoaded()) {
    alert("Please load the sample on the UTM machine first!");
    return;
  }
  plotGraph(
    document.getElementById("outputGraphB").getContext("2d"),
    {
      labels: readingData.strain,
      datasets: [
        {
          data: [],
          borderColor: "#3e95cd",
          fill: false,
        },
      ],
    },
    "Strain",
    "Stress"
  );
  document.getElementById("btnNext").disabled = true;
  document.getElementById("startTest1").addEventListener("click", (e) => {
    let tableBody = document.getElementById("testData");
    
    e.currentTarget.disabled = true;
    document.getElementById("btnNext").disabled = true;
    // document.getElementById("arrowNext").classList.add("disabled");
    e.currentTarget.innerHTML = "Running...";

    setTimeout(() => {
      utm.start(0.05, 1);
    }, 1200);

    let intr = setInterval(() => {
      if (currPos >= readingData.strain.length) {
        clearInterval(intr);
        document.getElementById("startTest1").disabled = true;
        document.getElementById("startTest1").innerHTML = "Done";
        document.getElementById("startTest2").disabled = false;
        utm.stop();
       // document.getElementById("btnNext").disabled = false;
        // document.getElementById("arrowNext").classList.remove("disabled");
        return;
      }

      tableBody.innerHTML += `
          <tr>
           
            <td>${parseFloat(readingData.strain[currPos]).toFixed(5)}</td>
            <td>${parseFloat(readingData.stress[currPos]).toFixed(5)}</td>
          </tr>
        `;
      currPos++;

   
      let progress2 = (readingData.stress.length / readingData.strain.length) * currPos;

      plotGraph(
        document.getElementById("outputGraphB").getContext("2d"),
        {
          labels: readingData.strain,
          datasets: [
            {
              data: readingData.stress.slice(0, progress2),
              borderColor: "#3e95cd",
              fill: false,
              pointRadius: 0,
              pointHoverRadius: 2,
            },
          ],
        },
        "Strain",
        "Stress"
      );
      document.querySelector(".menu").scrollTo(0, document.querySelector(".menu").scrollHeight);
    }, 200);
  });

  document.getElementById("startTest2").addEventListener("click", (e) => {
    currPos=0;

    let tableBody = document.getElementById("testData");
    tableBody.innerHTML= "";
    e.currentTarget.disabled = true;
    document.getElementById("btnNext").disabled = true;
    // document.getElementById("arrowNext").classList.add("disabled");
    e.currentTarget.innerHTML = "Running...";

    setTimeout(() => {
      utm.start(0.05, 1);
    }, 1200);

    let intr = setInterval(() => {
      if (currPos >= readingData.strain2.length) {
        clearInterval(intr);
        document.getElementById("startTest2").disabled = true;
        document.getElementById("startTest2").innerHTML = "Done";
        document.getElementById("startTest3").disabled = false;
        utm.stop();
       // document.getElementById("btnNext").disabled = false;
        // document.getElementById("arrowNext").classList.remove("disabled");
        return;
      }

      tableBody.innerHTML += `
          <tr>
           
            <td>${parseFloat(readingData.strain2[currPos]).toFixed(5)}</td>
            <td>${parseFloat(readingData.stress2[currPos]).toFixed(5)}</td>
          </tr>
        `;
      currPos++;

   
      let progress2 = (readingData.stress2.length / readingData.strain2.length) * currPos;

      plotGraph(
        document.getElementById("outputGraphB").getContext("2d"),
        {
          labels: readingData.strain2,
          datasets: [
            {
              data: readingData.stress2.slice(0, progress2),
              borderColor: "#3e95cd",
              fill: false,
              pointRadius: 0,
              pointHoverRadius: 2,
            },
          ],
        },
        "Strain",
        "Stress"
      );
      document.querySelector(".menu").scrollTo(0, document.querySelector(".menu").scrollHeight);
    }, 200);
  });
  document.getElementById("startTest3").addEventListener("click", (e) => {
    currPos=0;
    let tableBody = document.getElementById("testData");
    tableBody.innerHTML= "";
    e.currentTarget.disabled = true;
    document.getElementById("btnNext").disabled = true;
    // document.getElementById("arrowNext").classList.add("disabled");
    e.currentTarget.innerHTML = "Running...";

    setTimeout(() => {
      utm.start(0.05, 1);
    }, 1200);

    let intr = setInterval(() => {
      if (currPos >= readingData.strain3.length) {
        clearInterval(intr);
        document.getElementById("startTest3").disabled = true;
        document.getElementById("startTest3").innerHTML = "Done";
        document.getElementById("startTest4").disabled = false;
        utm.stop();
       // document.getElementById("btnNext").disabled = false;
        // document.getElementById("arrowNext").classList.remove("disabled");
        return;
      }

      tableBody.innerHTML += `
          <tr>
           
            <td>${parseFloat(readingData.strain3[currPos]).toFixed(5)}</td>
            <td>${parseFloat(readingData.stress3[currPos]).toFixed(5)}</td>
          </tr>
        `;
      currPos++;

   
      let progress2 = (readingData.stress3.length / readingData.strain3.length) * currPos;

      plotGraph(
        document.getElementById("outputGraphB").getContext("2d"),
        {
          labels: readingData.strain3,
          datasets: [
            {
              data: readingData.stress3.slice(0, progress2),
              borderColor: "#3e95cd",
              fill: false,
              pointRadius: 0,
              pointHoverRadius: 2,
            },
          ],
        },
        "Strain",
        "Stress"
      );
      document.querySelector(".menu").scrollTo(0, document.querySelector(".menu").scrollHeight);
    }, 200);
  });

  document.getElementById("startTest4").addEventListener("click", (e) => {
    currPos=0;
    let tableBody = document.getElementById("testData");
    tableBody.innerHTML= "";
    e.currentTarget.disabled = true;
    document.getElementById("btnNext").disabled = true;
    // document.getElementById("arrowNext").classList.add("disabled");
    e.currentTarget.innerHTML = "Running...";

    setTimeout(() => {
      utm.start(0.05, 1);
    }, 1200);

    let intr = setInterval(() => {
      if (currPos >= readingData.strain4.length) {
        clearInterval(intr);
        document.getElementById("startTest4").disabled = true;
        document.getElementById("startTest4").innerHTML = "Done";
        utm.stop();
        document.getElementById("btnNext").disabled = false;
        // document.getElementById("arrowNext").classList.remove("disabled");
        return;
      }

      tableBody.innerHTML += `
          <tr>
           
            <td>${parseFloat(readingData.strain4[currPos]).toFixed(5)}</td>
            <td>${parseFloat(readingData.stress4[currPos]).toFixed(5)}</td>
          </tr>
        `;
      currPos++;

   
      let progress2 = (readingData.stress4.length / readingData.strain4.length) * currPos;

      plotGraph(
        document.getElementById("outputGraphB").getContext("2d"),
        {
          labels: readingData.strain4,
          datasets: [
            {
              data: readingData.stress4.slice(0, progress2),
              borderColor: "#3e95cd",
              fill: false,
              pointRadius: 0,
              pointHoverRadius: 2,
            },
          ],
        },
        "Strain",
        "Stress"
      );
      document.querySelector(".menu").scrollTo(0, document.querySelector(".menu").scrollHeight);
    }, 200);
  });
  pane.classList.add("done");
  pane.classList.remove("active");
  let next = document.getElementById("step5");
  next.classList.add("active");
  next.classList.remove("disabled");

  

  currentStepProgress = 5;

  
}
function handleStep5(){

  let pane = document.getElementById("step5");
  document.querySelector("#step6 .content").innerHTML = `
   <h3>Measurements:</h3>
  <table>
    <tr>
      <th>% reduction</th>
      <th>Young’s Modulus (GPa)</th>
      <th>Yield stress (YS)</th>
      <th>Ultimate tensile strength (UTS)</th>
      <th>% elongation at fracture</th>
    </tr>
    <tr>
      <td>0%</td>
      <td>16.5</td>
      <td>48</td>
      <td>74.6</td>
      <td>11.2</td>
    </tr>
    <tr>
      <td>20%</td>
      <td>20.7</td>
      <td>76</td>
      <td>97.5</td>
      <td>11.4</td>
    </tr>
    <tr>
      <td>40%</td>
      <td>24.9</td>
      <td>83</td>
      <td>109.3</td>
      <td>8.8</td>
    </tr>
    <tr>
      <td>60%</td>
      <td>25.8</td>
      <td>88</td>
      <td>123.7</td>
      <td>8</td>
    </tr>
  </table>
   <img src="images/result.png" alt="" height= "300px" width= "500px" >
    <h4>Young's Modulus is lower as extensometer was not used</h4>
`;
  pane.classList.add("done");
  pane.classList.remove("active");

  let next = document.getElementById("step6");
  next.classList.add("active");
  next.classList.remove("disabled");

  currentStepProgress = 6;

 
}
function handleStep6() {
  let pane = document.getElementById("step6");
  modal = new Modal({
    title: "Can you answer the questions?",
  body: [
  {
    "page": 1,
    "title": "Which of the following does not improve due to strain hardening?",
    "options": [
      "Hardness",
      "Ultimate tensile strength",
      "Young’s modulus",
      "Yield strength"
    ],
    "correct": 2
  },
  {
    "page": 2,
    "title": "An aluminum plate has been rolled from 40 mm to 10 mm (thickness). Assume that width remains the same. The % cold working (% CW) is:",
    "options": [
      "150%",
      "75%",
      "37.5%",
      "30%"
    ],
    "correct": 1
  },
  {
    "page": 3,
    "title": "Given different samples are cold rolled to x % deformation; Sample A: 20 %, Sample B: 30 %, Sample C: 40 %, Sample D: 50 %. Which of the following is correct?",
    "options": [
      "% elongation of C > % elongation of D",
      "Yield Strength of C < Yield Strength of A",
      "Tensile Strength of A > Tensile Strength of D",
      "Elastic modulus of B < Elastic modulus of C"
    ],
    "correct": 0
  },
  {
    "page": 4,
    "title": "Which of the following statements is correct w.r.t. strain hardening?",
    "options": [
      "It decreases the dislocation density",
      "It is predominantly based on the addition of alloying elements",
      "Hardening occurs predominantly due to plastic deformation",
      "It is predominantly related to dislocation-solute interaction"
    ],
    "correct": 2
  },
  {
    "page": 5,
    "title": "Consider an aluminum plate has been subjected to 60 % cold rolling. Rectangular Tensile specimens (thickness: 2 mm and width: 5 mm) were cut from the rolled plate and then subjected to tensile test. If the maximum load noted is 750 N, what would be the ultimate tensile strength?",
    "options": [
      "750 MPa",
      "10 MPa",
      "150 MPa",
      "75 MPa"
    ],
    "correct": 3
  },
  {
    "page": 6,
    "title": "Given different samples are cold rolled to x % deformation; Sample A: 20 %, Sample B: 30 %, Sample C: 40 %, Sample D: 50 %. Which of the following is correct?",
    "options": [
      "% elongation of A < % elongation of B",
      "Yield Strength of C > Yield Strength of D",
      "Tensile Strength of D > Tensile Strength of A",
      "Elastic modulus of D > Elastic modulus of C"
    ],
    "correct": 2
  },
  {
    "page": 7,
    "title": "Which of the following statements is incorrect w.r.t. strain hardening?",
    "options": [
      "It is related to the elastic deformation",
      "Dislocation multiplication",
      "Dislocations strain field interaction",
      "Motion of dislocation is hindered by the presence of other dislocations"
    ],
    "correct": 0
  },
  {
    "page": 8,
    "title": "Which of the following decreases due to strain hardening?",
    "options": [
      "Yield strength",
      "Hardness",
      "Ductility (% elongation or strain to failure)",
      "Ultimate tensile strength"
    ],
    "correct": 2
  },
  {
    "page": 9,
    "title": "Consider an aluminum plate has been subjected to 20 % cold rolling. Rectangular Tensile specimens (thickness: 5 mm and width: 10 mm) were cut from the rolled plate and then subjected to tensile test. If the load at yield point is 1000 N, what would be the yield strength?",
    "options": [
      "500 MPa",
      "20 MPa",
      "10 MPa",
      "50 MPa"
    ],
    "correct": 1
  },
  {
    "page": 10,
    "title": "The temperature below which cold working of metal is carried out is called:",
    "options": [
      "Room temperature",
      "Melting temperature",
      "Below room temperature",
      "Recrystallization temperature"
    ],
    "correct": 3
  },
  {
    "page": 11,
    "title": "Which of the following cannot be used for work hardening?",
    "options": [
      "Heating the specimen",
      "Cold rolling",
      "Hammering",
      "Cold forging"
    ],
    "correct": 0
  }
]
,

    onClose: handleStep7,
  });
  modal.show();
  pane.classList.add("done");
  pane.classList.remove("active");

  let next = document.getElementById("step7");
  next.classList.add("active");
  next.classList.remove("disabled");

  // currentStepProgress = 6;
}

function handleStep7(){
  let pane = document.getElementById("step7");
 
  pane.classList.add("done");
  pane.classList.remove("active");
  document.getElementById("btnNext").disabled = true;
  document.getElementById("btnNext").innerText = "Done";
}

function plotGraph(graphCtx, data, labelX, labelY) {
  let chartObj = charts[graphCtx.canvas.id];
  if (chartObj) {
    chartObj.config.data.labels = data.labels;
    chartObj.config.data.datasets = data.datasets;
    chartObj.update();
  } else {
    charts[graphCtx.canvas.id] = new Chart(graphCtx, {
      type: "line",
      data: data,
      options: {
        responsive: true,
        animation: false,
        scaleOverride: true,
        legend: { display: false },
        scales: {
          xAxes: [
            {
              display: true,
              scaleLabel: {
                display: true,
                labelString: labelX,
              },
              ticks: {
                beginAtZero: true,
                callback: function (value, index, values) {
                  return parseFloat(value).toFixed(2);
                },
                max: 5,
              },
              stacked: true,
            },
          ],
          yAxes: [
            {
              display: true,
              scaleLabel: {
                display: true,
                labelString: labelY,
              },
              ticks: {
                beginAtZero: true,
                callback: function (value, index, values) {
                  return parseFloat(value).toFixed(0);
                },
              },
            },
          ],
        },
      },
    });
  }
}

function showGraph() {
  graphModal = new Modal({
    title: "Stree Strain Curve",
    body: [
      {
        page: 1,
        title: "Stress Strain Curve",
        image: "images/stress-strain-curve3.jpg",
      },
    ],
  });
  graphModal.show();
}